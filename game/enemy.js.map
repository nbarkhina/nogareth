{"version":3,"sources":["enemy.ts"],"names":[],"mappings":"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","file":"enemy.js","sourceRoot":"..","sourcesContent":["import { BOB, BOBAPI } from \"./bob\";\r\nimport { Level } from \"./level\";\r\nimport { Thing } from \"./thing\";\r\nimport { CONSTANTS, GetRandom } from \"./data\";\r\nimport { Tile } from \"./tile\";\r\nimport { GameObject } from \"./gameobject\";\r\n\r\nexport class Enemy extends Thing {\r\n    enemyID: number;\r\n\r\n    constructor(xt: number, yt: number, enID: number, bob: BOB, l: Level) {\r\n        super(xt, yt, bob, l);\r\n        this.type_id = CONSTANTS.GameType.ENEMY;\r\n        this.enemyID = enID;\r\n        if (this.enemyID == CONSTANTS.EnemyType.GreyZombie) {\r\n            this.height = 20;\r\n            this.width = 30;\r\n            this.speed = 2;\r\n            this.animationSpeed = 4;\r\n            this.y = this.y + 20;\r\n            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n        }\r\n        if (this.enemyID == CONSTANTS.EnemyType.RedZombie) {\r\n            this.height = 20;\r\n            this.width = 30;\r\n            this.speed = 2;\r\n            this.animationSpeed = 2;\r\n            this.y = this.y + 20;\r\n            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n        }\r\n        if (this.enemyID == CONSTANTS.EnemyType.Sluggo) {\r\n            this.height = 16;\r\n            this.width = 16;\r\n            this.speed = .5;\r\n            this.animationSpeed = 3;\r\n            this.x = this.x + 7;\r\n            this.y = this.y + 19;\r\n            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.processAnimation();\r\n        this.defaultDraw();\r\n    }\r\n\r\n    update() {\r\n        if (this.state == CONSTANTS.ThingState.FALLING)\r\n            return;\r\n\r\n        //reset vectors\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n        this.doAI();\r\n        this.getComponents();\r\n\r\n    }\r\n\r\n    move() {\r\n        if (this.state == CONSTANTS.ThingState.FALLING)\r\n            return;\r\n\r\n        this.x = this.x + this.vx;\r\n\r\n        this.movingX = true;\r\n        this.checkCorners(CONSTANTS.GameType.TILE);\r\n        //do collission detection with objects\r\n        for (let i = 0; i < this.currentLevel.objectSize; i++) {\r\n            if (this.checkCollision(this.currentLevel.objectArray[i]) > 0) {\r\n                this.currentLevel.objectArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.objectArray[i]);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.currentLevel.enemySize; i++) {\r\n            if (this.checkCollision(this.currentLevel.enemyArray[i]) > 0) {\r\n                this.currentLevel.enemyArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.enemyArray[i]);\r\n            }\r\n        }\r\n        this.movingX = false;\r\n\r\n        this.y = this.y + this.vy;\r\n\r\n        this.movingY = true;\r\n        this.checkCorners(CONSTANTS.GameType.TILE);\r\n        //do collission detection with objects\r\n        for (let i = 0; i < this.currentLevel.objectSize; i++) {\r\n            if (this.checkCollision(this.currentLevel.objectArray[i]) > 0) {\r\n                this.currentLevel.objectArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.objectArray[i]);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.currentLevel.enemySize; i++) {\r\n            if (this.checkCollision(this.currentLevel.enemyArray[i]) > 0) {\r\n                //currentLevel->enemyArray[i].handleCollision(*this);\r\n                this.handleCollision(this.currentLevel.enemyArray[i]);\r\n            }\r\n        }\r\n        this.movingY = false;\r\n\r\n    }\r\n\r\n\r\n    //figure out what frame of animation to use, and set it to currentFrame.\r\n    processAnimation() {\r\n\r\n        if (this.enemyID == CONSTANTS.EnemyType.GreyZombie || this.enemyID == CONSTANTS.EnemyType.RedZombie) {\r\n            if (this.state == CONSTANTS.ThingState.FALLING) {\r\n                if (this.animationCounter < 15)\r\n                    this.currentFrame = 12;\r\n                if (this.animationCounter >= 15 && this.animationCounter < 30)\r\n                    this.currentFrame = 13;\r\n                if (this.animationCounter >= 30 && this.animationCounter < 45)\r\n                    this.currentFrame = 14;\r\n                if (this.animationCounter >= 45)\r\n                    this.alive = false;\r\n            }\r\n            if (this.state == CONSTANTS.ThingState.NORMAL) {\r\n                if (this.velocity == 0)\r\n                    this.animationFlipper = 0;\r\n                if (this.angle >= 0 && this.angle < 90) {\r\n                    this.currentFrame = 9 + this.animationFlipper;\r\n                }\r\n                if (this.angle >= 90 && this.angle < 180) {\r\n                    this.currentFrame = 3 + this.animationFlipper;\r\n                }\r\n                if (this.angle >= 180 && this.angle < 270) {\r\n                    this.currentFrame = 0 + this.animationFlipper;\r\n                }\r\n                if (this.angle >= 270 && this.angle < 360) {\r\n                    this.currentFrame = 6 + this.animationFlipper;\r\n                }\r\n                if (this.animationCounter >= this.animationSpeed) {\r\n                    this.animationFlipper++;\r\n                    this.animationCounter = 0;\r\n                    if (this.animationFlipper > 2)\r\n                        this.animationFlipper = 0;\r\n                }\r\n            }\r\n            this.animationCounter++;\r\n            this.bob.x = this.x;\r\n            this.bob.y = this.y - 20;\r\n        }\r\n        if (this.enemyID == CONSTANTS.EnemyType.Sluggo) {\r\n            if (this.state == CONSTANTS.ThingState.NORMAL) {\r\n                if (this.velocity == 0)\r\n                    this.animationFlipper = 0;\r\n                if (this.angle >= 0 && this.angle < 90) {\r\n                    this.currentFrame = 9 + this.animationFlipper;\r\n                }\r\n                if (this.angle >= 90 && this.angle < 180) {\r\n                    this.currentFrame = 3 + this.animationFlipper;\r\n                }\r\n                if (this.angle >= 180 && this.angle < 270) {\r\n                    this.currentFrame = 0 + this.animationFlipper;\r\n                }\r\n                if (this.angle >= 270 && this.angle < 360) {\r\n                    this.currentFrame = 6 + this.animationFlipper;\r\n                }\r\n                if (this.animationCounter >= this.animationSpeed) {\r\n                    this.animationFlipper++;\r\n                    this.animationCounter = 0;\r\n                    if (this.animationFlipper > 2)\r\n                        this.animationFlipper = 0;\r\n                }\r\n            }\r\n            if (this.state == CONSTANTS.ThingState.FALLING) {\r\n                this.alive = false;\r\n            }\r\n            this.animationCounter++;\r\n            this.bob.x = this.x - 7;\r\n            this.bob.y = this.y - 19;\r\n        }\r\n        this.bob.curr_frame = this.currentFrame;\r\n\r\n    }\r\n\r\n    checkCorners(thing: number) {\r\n        if (this.x <= 0 || this.y <= 0 || this.x + this.width - 1 >= this.currentLevel.width * 40 || this.y + this.height - 1 >= this.currentLevel.height * 40)\r\n            return;\r\n        if (thing == CONSTANTS.GameType.TILE) {\r\n            //if checkCollision returned true, run both handleCollisions\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x, this.y)) > 0) {\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x, this.y));\r\n                this.currentLevel.getTileObject(this.x, this.y).handleCollision(this);\r\n            }\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y)) > 0) {\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y));\r\n                this.currentLevel.getTileObject(this.x + this.width - 1, this.y).handleCollision(this);\r\n            }\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y + this.height - 1)) > 0) {\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y + this.height - 1));\r\n                this.currentLevel.getTileObject(this.x + this.width - 1, this.y + this.height - 1).handleCollision(this);\r\n            }\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x, this.y + this.height - 1)) > 0) {\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x, this.y + this.height - 1));\r\n                this.currentLevel.getTileObject(this.x, this.y + this.height - 1).handleCollision(this);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    handleCollision(thing: Thing) {\r\n        if (this == thing)\r\n            return;\r\n        if (this.enemyID == CONSTANTS.EnemyType.GreyZombie) {\r\n            switch (this.AI_mode) {\r\n                case CONSTANTS.AiMode.Sleep:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.DumbWalk:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.TILE) {\r\n\r\n                            let tempTile: Tile = thing as Tile;\r\n                            if (tempTile.tileType == CONSTANTS.TileType.Wall) {\r\n                                this.angle = 90;\r\n                                let temp = GetRandom(4);\r\n                                if (temp == 0)\r\n                                    this.angle = 0;\r\n                                if (temp == 1)\r\n                                    this.angle = 90;\r\n                                if (temp == 2)\r\n                                    this.angle = 180;\r\n                                if (temp == 3)\r\n                                    this.angle = 270;\r\n                            }\r\n\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.OBJECT) {\r\n                            let tempObject = thing as GameObject;\r\n                            if (tempObject.objectType == CONSTANTS.ObjectType.REDDOOR || tempObject.objectType == CONSTANTS.ObjectType.GREENDOOR || tempObject.objectType == CONSTANTS.ObjectType.BLUEDOOR) {\r\n                                this.angle = 90;\r\n                                let temp = GetRandom(4);\r\n                                if (temp == 0)\r\n                                    this.angle = 0;\r\n                                if (temp == 1)\r\n                                    this.angle = 90;\r\n                                if (temp == 2)\r\n                                    this.angle = 180;\r\n                                if (temp == 3)\r\n                                    this.angle = 270;\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.ENEMY) {\r\n                            this.angle += 180;\r\n                            if (this.angle >= 360)\r\n                                this.angle -= 360;\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.SeekPlayer:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.OBJECT) {\r\n                            let tempObject = thing as GameObject;\r\n                            if (tempObject.objectType == CONSTANTS.ObjectType.REDDOOR || tempObject.objectType == CONSTANTS.ObjectType.GREENDOOR || tempObject.objectType == CONSTANTS.ObjectType.BLUEDOOR) {\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n            }\r\n\r\n        }\r\n\r\n        if (this.enemyID == CONSTANTS.EnemyType.RedZombie) {\r\n            switch (this.AI_mode) {\r\n                case CONSTANTS.AiMode.Sleep:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.DumbWalk:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.TILE) {\r\n                            let tempTile: Tile = thing as Tile;\r\n                            if (tempTile.tileType == CONSTANTS.TileType.Wall || tempTile.tileType == CONSTANTS.TileType.Hole) {\r\n                                this.angle = 90;\r\n                                let temp = GetRandom(4);\r\n                                if (temp == 0)\r\n                                    this.angle = 0;\r\n                                if (temp == 1)\r\n                                    this.angle = 90;\r\n                                if (temp == 2)\r\n                                    this.angle = 180;\r\n                                if (temp == 3)\r\n                                    this.angle = 270;\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.OBJECT) {\r\n                            let tempObject = thing as GameObject;\r\n                            if (tempObject.objectType == CONSTANTS.ObjectType.REDDOOR || tempObject.objectType == CONSTANTS.ObjectType.GREENDOOR || tempObject.objectType == CONSTANTS.ObjectType.BLUEDOOR) {\r\n                                this.angle = 90;\r\n                                let temp = GetRandom(4);\r\n                                if (temp == 0)\r\n                                    this.angle = 0;\r\n                                if (temp == 1)\r\n                                    this.angle = 90;\r\n                                if (temp == 2)\r\n                                    this.angle = 180;\r\n                                if (temp == 3)\r\n                                    this.angle = 270;\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.ENEMY) {\r\n                            this.angle += 180;\r\n                            if (this.angle >= 360)\r\n                                this.angle -= 360;\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.SeekPlayer:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.TILE) {\r\n                            let tempTile = thing as Tile;\r\n                            if (tempTile.tileType == CONSTANTS.TileType.Hole) {\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.OBJECT) {\r\n                            let tempObject = thing as GameObject;\r\n                            if (tempObject.objectType == CONSTANTS.ObjectType.REDDOOR || tempObject.objectType == CONSTANTS.ObjectType.GREENDOOR || tempObject.objectType == CONSTANTS.ObjectType.BLUEDOOR) {\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n\r\n        }\r\n        if (this.enemyID == CONSTANTS.EnemyType.Sluggo) {\r\n            switch (this.AI_mode) {\r\n                case CONSTANTS.AiMode.Sleep:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(25);\r\n                            this.currentLevel.player.bounce(this);\r\n                            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.DumbWalk:\r\n                    {\r\n                        if (thing.type_id == CONSTANTS.GameType.PLAYER) {\r\n                            this.currentLevel.player.hurt(10);\r\n                            this.currentLevel.player.bounce(this);\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.TILE) {\r\n                            let tempTile: Tile = thing as Tile;\r\n                            if (tempTile.tileType == CONSTANTS.TileType.Wall || tempTile.tileType == CONSTANTS.TileType.Hole) {\r\n                                this.angle = 90;\r\n                                let temp = GetRandom(4);\r\n                                if (temp == 0)\r\n                                    this.angle = 0;\r\n                                if (temp == 1)\r\n                                    this.angle = 90;\r\n                                if (temp == 2)\r\n                                    this.angle = 180;\r\n                                if (temp == 3)\r\n                                    this.angle = 270;\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.OBJECT) {\r\n                            let tempObject = thing as GameObject;\r\n                            if (tempObject.objectType == CONSTANTS.ObjectType.REDDOOR || tempObject.objectType == CONSTANTS.ObjectType.GREENDOOR || tempObject.objectType == CONSTANTS.ObjectType.BLUEDOOR) {\r\n                                this.angle = 90;\r\n                                let temp = GetRandom(4);\r\n                                if (temp == 0)\r\n                                    this.angle = 0;\r\n                                if (temp == 1)\r\n                                    this.angle = 90;\r\n                                if (temp == 2)\r\n                                    this.angle = 180;\r\n                                if (temp == 3)\r\n                                    this.angle = 270;\r\n                                if (this.movingX) {\r\n                                    this.moveToEdgeX(this, thing);\r\n                                }\r\n                                else {\r\n                                    this.moveToEdgeY(this, thing);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (thing.type_id == CONSTANTS.GameType.ENEMY) {\r\n                            this.angle += 180;\r\n                            if (this.angle >= 360)\r\n                                this.angle -= 360;\r\n                        }\r\n                        break;\r\n                    }\r\n            }\r\n\r\n        }\r\n\r\n        this.defaultHandleCollision(thing);\r\n    }\r\n\r\n    defaultHandleCollision(thing: Thing) {\r\n\r\n        if (thing.type_id == CONSTANTS.GameType.ENEMY) {\r\n            if (this.movingX) {\r\n                this.moveToEdgeX(this, thing);\r\n            }\r\n            else {\r\n                this.moveToEdgeY(this, thing);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    doAI() {\r\n        if (this.enemyID == CONSTANTS.EnemyType.GreyZombie) {\r\n            switch (this.AI_mode) {\r\n                case CONSTANTS.AiMode.Sleep:\r\n                    {\r\n                        this.velocity = 0;\r\n                        this.animationSpeed = 4;\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.DumbWalk:\r\n                    {\r\n                        this.velocity = this.speed;\r\n                        this.animationSpeed = 4;\r\n                        if (this.getDistance(this.currentLevel.player) < 180) {\r\n                            this.AI_mode = CONSTANTS.AiMode.SeekPlayer;\r\n                            BOBAPI.DSound_Play(5);\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.SeekPlayer:\r\n                    {\r\n                        this.angle = this.getAngle(this.currentLevel.player.x, this.currentLevel.player.y);\r\n                        this.velocity = this.speed + 1;\r\n                        this.animationSpeed = 2;\r\n                        if (this.getDistance(this.currentLevel.player) > 300) {\r\n                            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n                            BOBAPI.DSound_Play(10);\r\n                        }\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n        if (this.enemyID == CONSTANTS.EnemyType.RedZombie) {\r\n            switch (this.AI_mode) {\r\n                case CONSTANTS.AiMode.Sleep:\r\n                    {\r\n                        this.velocity = 0;\r\n                        this.animationSpeed = 4;\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.DumbWalk:\r\n                    {\r\n                        this.velocity = this.speed;\r\n                        this.animationSpeed = 4;\r\n                        if (this.getDistance(this.currentLevel.player) < 180) {\r\n                            this.AI_mode = CONSTANTS.AiMode.SeekPlayer;\r\n                            BOBAPI.DSound_Play(5);\r\n                        }\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.SeekPlayer:\r\n                    {\r\n                        this.angle = this.getAngle(this.currentLevel.player.x, this.currentLevel.player.y);\r\n                        this.velocity = this.speed + 2;\r\n                        this.animationSpeed = 1;\r\n                        if (this.getDistance(this.currentLevel.player) > 300) {\r\n                            this.AI_mode = CONSTANTS.AiMode.DumbWalk;\r\n                            BOBAPI.DSound_Play(10);\r\n                        }\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n        if (this.enemyID == CONSTANTS.EnemyType.Sluggo) {\r\n            switch (this.AI_mode) {\r\n                case CONSTANTS.AiMode.Sleep:\r\n                    {\r\n                        this.velocity = 0;\r\n                        this.animationSpeed = 3;\r\n                        break;\r\n                    }\r\n                case CONSTANTS.AiMode.DumbWalk:\r\n                    {\r\n                        this.velocity = this.speed;\r\n                        this.animationSpeed = 3;\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    hurt(h: number) {\r\n        this.health -= h;\r\n        if (this.health <= 0)\r\n            this.alive = false;\r\n    }\r\n\r\n    getDistance(thing: Thing) {\r\n        return Math.sqrt(Math.pow((this.x - thing.x), 2) + Math.pow((this.y - thing.y), 2));\r\n    }\r\n\r\n}"]}