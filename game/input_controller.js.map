{"version":3,"sources":["input_controller.ts"],"names":[],"mappings":"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","file":"input_controller.js","sourceRoot":"..","sourcesContent":["//Input Controller API's to help with\r\n//keyboard and gamepad processing event\r\n\r\ndeclare var navigator, $;\r\n\r\nexport class GamePadState{\r\n    buttonDown:boolean = false;\r\n    buttonNum:number = -1;\r\n    buttonTimer = 0;\r\n    keyName:string = '';\r\n    \r\n\r\n    constructor(buttonNum:number,keyName:string) {\r\n        this.buttonNum = buttonNum;\r\n        this.keyName = keyName;\r\n    }\r\n\r\n}\r\n\r\nexport class KeyMappings{\r\n    Mapping_Left:string = null;\r\n    Mapping_Right:string = null;\r\n    Mapping_Up:string = null;\r\n    Mapping_Down:string = null;\r\n    Mapping_Action_1:string = null;\r\n    Mapping_Action_2:string = null;\r\n    Mapping_Action_3:string = null;\r\n    Mapping_Action_4:string = null;\r\n    Mapping_Action_5:string = null;\r\n    Mapping_Action_6:string = null;\r\n    Mapping_Action_7:string = null;\r\n    Mapping_Start:string = null;\r\n    Mapping_Select:string = null;\r\n}\r\n\r\nexport class InputController{\r\n\r\n    gamepadButtons:GamePadState[] = [];\r\n\r\n    Key_Up=false;\r\n    Key_Down=false;\r\n    Key_Left=false;\r\n    Key_Right=false;\r\n    Key_Action_1=false;\r\n    Key_Action_2=false;\r\n    Key_Action_3=false;\r\n    Key_Action_4=false;\r\n    Key_Action_5=false;\r\n    Key_Action_6=false;\r\n    Key_Action_7=false;\r\n\r\n    Key_Start = false;\r\n    Key_Select = false;\r\n    Gamepad_Process_Axis = false;\r\n    GamepadHorizontalAccess:number = 0;\r\n    GamepadVerticalAccess:number = 0;\r\n    Touch_Tap = false;\r\n    KeyMappings: KeyMappings;\r\n    DebugKeycodes = false;\r\n    LastKey: string = '';\r\n    LastGameButton: string = '';\r\n    GamepadDetails: string = '';\r\n\r\n    //keypress\r\n    private _last_key_press:string = null;\r\n    KEY_PRESS:string = null;\r\n\r\n    //mobile buttons\r\n    Mobile1=false; \r\n    Mobile2=false; \r\n    MobileStart=false; \r\n    MobileSelect=false; \r\n\r\n    //touch\r\n    private touchX_Start:number = 0;\r\n    private touchY_Start:number = 0;\r\n    private touch_tap_counter = 0;\r\n    \r\n    constructor(touch_element_id?:string,touch_exclude_id?:string){\r\n        window[\"inputController\"] = this;\r\n\r\n\r\n        if (touch_element_id)\r\n        {\r\n            //you have to do this if the main element\r\n            //takes up the whole screen other html buttons won't work\r\n            //see Tetris JS Implementation\r\n            if (touch_exclude_id){\r\n                document.getElementById(touch_exclude_id).addEventListener( 'touchstart', function(e){e.stopPropagation();}, false );\r\n                document.getElementById(touch_exclude_id).addEventListener( 'touchend', function(e){ e.stopPropagation();}, false );\r\n            }\r\n\r\n            document.getElementById(touch_element_id).addEventListener( 'touchstart', this.touchStart, false );\r\n            document.getElementById(touch_element_id).addEventListener( 'touchend', this.touchEnd, false );\r\n            document.getElementById(touch_element_id).addEventListener( 'touchmove', this.touchMove, false );\r\n\r\n            document.getElementById('mobile1').addEventListener( 'touchstart', this.mobilePressA.bind(this), false );\r\n            document.getElementById('mobile2').addEventListener( 'touchstart', this.mobilePressB.bind(this), false );\r\n            document.getElementById('mobileStart').addEventListener( 'touchstart', this.mobilePressStart.bind(this), false );\r\n            document.getElementById('mobileSelect').addEventListener( 'touchstart', this.mobilePressSelect.bind(this), false );\r\n            document.getElementById('mobile1').addEventListener( 'touchend', this.mobileReleaseA.bind(this), false );\r\n            document.getElementById('mobile2').addEventListener( 'touchend', this.mobileReleaseB.bind(this), false );\r\n            document.getElementById('mobileStart').addEventListener( 'touchend', this.mobileReleaseStart.bind(this), false );\r\n            document.getElementById('mobileSelect').addEventListener( 'touchend', this.mobileReleaseSelect.bind(this), false );\r\n            document.getElementById('mobile1').addEventListener( 'touchmove', function(e){e.preventDefault();}, false );\r\n            document.getElementById('mobile2').addEventListener( 'touchmove', function(e){e.preventDefault();}, false );\r\n            document.getElementById('mobileStart').addEventListener( 'touchmove', function(e){e.preventDefault();}, false );\r\n            document.getElementById('mobileSelect').addEventListener( 'touchmove', function(e){e.preventDefault();}, false );\r\n\r\n            //to hide and show loading panel\r\n            document.getElementById('menuDiv').addEventListener( 'touchstart', this.canvasTouch.bind(this), false );\r\n\r\n        }\r\n\r\n        this.KeyMappings = {\r\n            Mapping_Left:'ArrowLeft',\r\n            Mapping_Right:'ArrowRight',\r\n            Mapping_Up:'ArrowUp',\r\n            Mapping_Down:'ArrowDown',\r\n            Mapping_Action_1:'a',\r\n            Mapping_Action_2:'s',\r\n            Mapping_Action_3:'z',\r\n            Mapping_Action_4:'x',\r\n            Mapping_Action_5:'q',\r\n            Mapping_Action_6:'w',\r\n            Mapping_Action_7:'w',\r\n            Mapping_Start:'p',\r\n            Mapping_Select:'n'\r\n        }\r\n        \r\n\r\n        //only for HTML5 Canvas\r\n        //document.addEventListener( 'wheel', this.prevent, false );\r\n        //document.addEventListener( 'contextmenu', this.prevent, false );\r\n\r\n        document.onkeydown = this.keyDown; \r\n        document.onkeyup = this.keyUp;\r\n\r\n        console.log('InputController Initialized');\r\n    }\r\n\r\n    canvasTouch(event:TouchEvent){\r\n        if (event.touches[0].clientY<50)\r\n            $(\"#divMain\").show();\r\n        $('#menuDiv').hide();\r\n    }\r\n\r\n    mobilePressA(event){\r\n        event.preventDefault();\r\n        this.Key_Action_1 = true;\r\n        this.Mobile1 = true;\r\n    }\r\n    mobilePressB(event){\r\n        event.preventDefault();\r\n        this.Key_Action_2 = true;\r\n        this.Mobile2 = true;\r\n    }\r\n    mobilePressStart(event){\r\n        event.preventDefault();\r\n        this.Key_Start = true;\r\n        this.MobileStart = true;\r\n    }\r\n    mobilePressSelect(event){\r\n        event.preventDefault();\r\n        this.Key_Select = true;\r\n        this.MobileSelect = true;\r\n    }\r\n    mobileReleaseA(event){\r\n        event.preventDefault();\r\n        this.Mobile1 = false;\r\n        this.Key_Action_1 = false;\r\n    }\r\n    mobileReleaseB(event){\r\n        event.preventDefault();\r\n        this.Mobile2 = false;\r\n        this.Key_Action_2 = false;\r\n    }\r\n    mobileReleaseStart(event){\r\n        event.preventDefault();\r\n        this.MobileStart = false;\r\n        this.Key_Start = false;\r\n    }\r\n    mobileReleaseSelect(event){\r\n        event.preventDefault();\r\n        this.MobileSelect = false; \r\n        this.Key_Start = false;\r\n    }\r\n\r\n    setupGamePad(){\r\n        window.addEventListener(\"gamepadconnected\", this.initGamePad.bind(this));\r\n        this.gamepadButtons.push(new GamePadState(14,this.KeyMappings.Mapping_Left));\r\n        this.gamepadButtons.push(new GamePadState(15,this.KeyMappings.Mapping_Right));\r\n        this.gamepadButtons.push(new GamePadState(13,this.KeyMappings.Mapping_Down));\r\n        this.gamepadButtons.push(new GamePadState(12,this.KeyMappings.Mapping_Up));\r\n        // this.gamepadButtons.push(new GamePadState(0,this.KeyMappings.Mapping_Action_1));\r\n        // this.gamepadButtons.push(new GamePadState(1,this.KeyMappings.Mapping_Action_2));\r\n        // this.gamepadButtons.push(new GamePadState(2,this.KeyMappings.Mapping_Action_3));\r\n        // this.gamepadButtons.push(new GamePadState(3,this.KeyMappings.Mapping_Action_4));\r\n        // this.gamepadButtons.push(new GamePadState(4,this.KeyMappings.Mapping_Action_5));\r\n        // this.gamepadButtons.push(new GamePadState(5,this.KeyMappings.Mapping_Action_6));\r\n        this.gamepadButtons.push(new GamePadState(9,this.KeyMappings.Mapping_Start));\r\n        this.gamepadButtons.push(new GamePadState(8,this.KeyMappings.Mapping_Select));\r\n    }\r\n\r\n    private initGamePad(e)\r\n    {\r\n        try{\r\n            if (e.gamepad.buttons.length>0)\r\n            {\r\n                // this.message = '<b>Gamepad Detected:</b><br>' + e.gamepad.id;\r\n            }\r\n        }catch{}\r\n\r\n            console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n              e.gamepad.index, e.gamepad.id,\r\n              e.gamepad.buttons.length, e.gamepad.axes.length);\r\n\r\n              let input_controller = window[\"inputController\"] as InputController;\r\n              input_controller.GamepadDetails = 'Gamepad connected at index ' + e.gamepad.index \r\n                + ' ID:' + e.gamepad.id + ' Buttons: ' + e.gamepad.buttons.length + ' Axes: ' + e.gamepad.axes.length;\r\n    }\r\n\r\n\r\n    processGamepad(){\r\n        try{\r\n            var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\n            if (!gamepads)\r\n              return;\r\n            var gp = null;\r\n            for (let i=0;i<gamepads.length;i++) \r\n            {\r\n                if (gamepads[i] && gamepads[i].buttons.length>0)\r\n                    gp = gamepads[i];\r\n            }\r\n                \r\n\r\n            if (gp)\r\n            {\r\n                for (let i = 0; i < gp.buttons.length; i++) {\r\n\r\n                    if (gp.buttons[i].pressed) {\r\n                        if (this.DebugKeycodes) {\r\n                            console.log('Gamepad Button: ' + i);\r\n                        }\r\n                        this.LastGameButton = i.toString();\r\n                    }\r\n\r\n                }\r\n                this.gamepadButtons.forEach(button => {\r\n\r\n                    if (gp.buttons[button.buttonNum].pressed)\r\n                    {\r\n                        if (button.buttonTimer==0)\r\n                        {\r\n                            this.sendKeyDownEvent(button.keyName);\r\n                        }   \r\n                        button.buttonDown = true;\r\n                        button.buttonTimer++;\r\n                    }\r\n                    else if (button.buttonDown)\r\n                    {\r\n                        if (!gp.buttons[button.buttonNum].pressed)\r\n                        {\r\n                            button.buttonDown = false;\r\n                            button.buttonTimer = 0;\r\n                            this.sendKeyUpEvent(button.keyName);\r\n                        }\r\n                    }\r\n\r\n\r\n                });  \r\n                \r\n\r\n                //process axes\r\n                if (this.Gamepad_Process_Axis)\r\n                {\r\n                    try\r\n                    {\r\n                        // console.log('axis count: ' + gp.axes.length);\r\n                        // var axisString = '';\r\n                        // gp.axes.forEach(axis => {\r\n                        //     axisString += axis + ', ';\r\n                        // });\r\n                        // console.log('axis state: ' + axisString);\r\n\r\n                        let horiz_axis = gp.axes[0] as number;\r\n                        let vertical_axis = gp.axes[1] as number;\r\n                        this.GamepadHorizontalAccess = horiz_axis;\r\n                        this.GamepadVerticalAccess = vertical_axis;\r\n    \r\n                        if (horiz_axis<-.5)\r\n                            this.Key_Left = true;\r\n                        else\r\n                            this.Key_Left = false;\r\n    \r\n                        if (horiz_axis>.5)\r\n                            this.Key_Right = true;\r\n                        else\r\n                            this.Key_Right = false;\r\n    \r\n                        if (vertical_axis<-.5)\r\n                            this.Key_Down = true;\r\n                        else\r\n                            this.Key_Down = false;\r\n    \r\n                        if (vertical_axis>.5)\r\n                            this.Key_Up = true;\r\n                        else\r\n                            this.Key_Up = false;\r\n    \r\n                    }catch(error){}\r\n                }\r\n\r\n\r\n            }\r\n                \r\n\r\n        }catch{}\r\n    }\r\n\r\n    sendKeyDownEvent(key:string)\r\n    {\r\n        let keyEvent = new KeyboardEvent('Gamepad Event Down',{key:key});\r\n        this.keyDown(keyEvent);\r\n    }\r\n\r\n    sendKeyUpEvent(key:string)\r\n    {\r\n        let keyEvent = new KeyboardEvent('Gamepad Event Up',{key:key});\r\n        this.keyUp(keyEvent);\r\n    }\r\n\r\n    keyDown(event:KeyboardEvent)\r\n    {\r\n        \r\n        let input_controller = window[\"inputController\"] as InputController;\r\n        if (input_controller.DebugKeycodes)\r\n            console.log(event);\r\n        \r\n        input_controller.LastKey = event.key;\r\n        \r\n        //handle certain keyboards that use Left instead of ArrowLeft\r\n        if (event.key=='Left' && input_controller.KeyMappings.Mapping_Left=='ArrowLeft') event = new KeyboardEvent('',{key:'ArrowLeft'});\r\n        if (event.key=='Right' && input_controller.KeyMappings.Mapping_Right=='ArrowRight') event = new KeyboardEvent('',{key:'ArrowRight'});\r\n        if (event.key=='Up' && input_controller.KeyMappings.Mapping_Up=='ArrowUp') event = new KeyboardEvent('',{key:'ArrowUp'});\r\n        if (event.key=='Down' && input_controller.KeyMappings.Mapping_Down=='ArrowDown') event = new KeyboardEvent('',{key:'ArrowDown'});\r\n\r\n        if (event.key==input_controller.KeyMappings.Mapping_Down)\r\n        {\r\n            input_controller.Key_Down = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Up)\r\n        {\r\n            input_controller.Key_Up = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Left)\r\n        {\r\n            input_controller.Key_Left = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Right)\r\n        {\r\n            input_controller.Key_Right = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_1)\r\n        {\r\n            input_controller.Key_Action_1 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_2)\r\n        {\r\n            input_controller.Key_Action_2 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_3)\r\n        {\r\n            input_controller.Key_Action_3 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_4)\r\n        {\r\n            input_controller.Key_Action_4 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_5)\r\n        {\r\n            input_controller.Key_Action_5 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_6)\r\n        {\r\n            input_controller.Key_Action_6 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_7)\r\n        {\r\n            input_controller.Key_Action_7 = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Start)\r\n        {\r\n            input_controller.Key_Start = true;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Select)\r\n        {\r\n            input_controller.Key_Select = true;\r\n        }\r\n        \r\n    }\r\n\r\n    keyUp(event:KeyboardEvent)\r\n    {\r\n        let input_controller = window[\"inputController\"] as InputController;\r\n\r\n        //handle certain keyboards that use Left instead of ArrowLeft\r\n        if (event.key=='Left' && input_controller.KeyMappings.Mapping_Left=='ArrowLeft') event = new KeyboardEvent('',{key:'ArrowLeft'});\r\n        if (event.key=='Right' && input_controller.KeyMappings.Mapping_Right=='ArrowRight') event = new KeyboardEvent('',{key:'ArrowRight'});\r\n        if (event.key=='Up' && input_controller.KeyMappings.Mapping_Up=='ArrowUp') event = new KeyboardEvent('',{key:'ArrowUp'});\r\n        if (event.key=='Down' && input_controller.KeyMappings.Mapping_Down=='ArrowDown') event = new KeyboardEvent('',{key:'ArrowDown'});\r\n\r\n        if (event.key==input_controller.KeyMappings.Mapping_Down)\r\n        {\r\n            input_controller.Key_Down = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Up)\r\n        {\r\n            input_controller.Key_Up = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Left)\r\n        {\r\n            input_controller.Key_Left = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Right)\r\n        {\r\n            input_controller.Key_Right = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_1)\r\n        {\r\n            input_controller.Key_Action_1 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_2)\r\n        {\r\n            input_controller.Key_Action_2 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_3)\r\n        {\r\n            input_controller.Key_Action_3 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_4)\r\n        {\r\n            input_controller.Key_Action_4 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_5)\r\n        {\r\n            input_controller.Key_Action_5 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_6)\r\n        {\r\n            input_controller.Key_Action_6 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Action_7)\r\n        {\r\n            input_controller.Key_Action_7 = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Start)\r\n        {\r\n            input_controller.Key_Start = false;\r\n        }\r\n        if (event.key==input_controller.KeyMappings.Mapping_Select)\r\n        {\r\n            input_controller.Key_Select = false;\r\n        }\r\n\r\n        input_controller._last_key_press = event.key;\r\n    }\r\n\r\n    prevent(event){\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    touchStart(event:TouchEvent){\r\n        event.preventDefault();\r\n        let input_controller = window[\"inputController\"] as InputController;\r\n\r\n        input_controller.touchX_Start = event.touches[0].clientX;\r\n        input_controller.touchY_Start = event.touches[0].clientY;\r\n    }\r\n\r\n    touchMove(event:TouchEvent){\r\n        event.preventDefault();\r\n        let input_controller = window[\"inputController\"] as InputController;\r\n\r\n        var amount_horizontal = event.touches[0].clientX-input_controller.touchX_Start;\r\n        var amount_vertical = event.touches[0].clientY-input_controller.touchY_Start;\r\n        \r\n        if (amount_horizontal>10)\r\n            input_controller.Key_Right=true;\r\n        if (amount_horizontal<-10)\r\n            input_controller.Key_Left=true;\r\n        if (amount_vertical>10)\r\n            input_controller.Key_Down=true;\r\n        if (amount_vertical<-10)\r\n            input_controller.Key_Up=true;\r\n    }\r\n\r\n\r\n    touchEnd(event:TouchEvent){\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        let input_controller = window[\"inputController\"] as InputController;\r\n\r\n        if (input_controller.Key_Left==false && input_controller.Key_Right==false \r\n            && input_controller.Key_Down==false && input_controller.Key_Up==false)\r\n            input_controller.Touch_Tap=true;\r\n        input_controller.Key_Left=false;\r\n        input_controller.Key_Right=false;\r\n        input_controller.Key_Up=false;\r\n        input_controller.Key_Down=false;\r\n    }\r\n\r\n    mouseUp(event){\r\n        event.preventDefault();\r\n        // window[\"myApp\"].isMouseDown = false;\r\n    }\r\n\r\n    mouseDown(event:MouseEvent){\r\n        event.preventDefault();\r\n        // window[\"myApp\"].isMouseDown = true;\r\n    }\r\n\r\n    mouseMove(event:MouseEvent){\r\n        event.preventDefault();\r\n        //TODO\r\n\r\n        // let app = window[\"myApp\"] as MyApp;\r\n        // if (app.isMouseDown)\r\n        // {\r\n        //     app.camera.position.x += event.movementX;\r\n        //     app.camera.position.z += event.movementY;\r\n        // }\r\n    }\r\n\r\n    update(){\r\n        this.processGamepad();\r\n        if (this.Touch_Tap)\r\n            this.touch_tap_counter++;\r\n        if (this.touch_tap_counter>1)\r\n        {\r\n            this.Touch_Tap = false;\r\n            this.touch_tap_counter = 0;\r\n        }\r\n\r\n        //make sure keypress lasts for exactly 1 frame\r\n        if (this.KEY_PRESS)\r\n            this.KEY_PRESS=null;\r\n        if (this._last_key_press){\r\n            this.KEY_PRESS = this._last_key_press;\r\n            this._last_key_press = null;\r\n        }\r\n    }\r\n\r\n    loop(){\r\n        this.update();\r\n\t\twindow.requestAnimationFrame(this.loop.bind(this));\r\n\t}\r\n}"]}