{"version":3,"sources":["game/level.ts"],"names":[],"mappings":"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","file":"level.js","sourceRoot":"..","sourcesContent":["import { Player } from \"./player\";\r\nimport { BOB } from \"./bob\";\r\nimport { Tile, instr, set_state_instr, toggle_state_instr, set_state_temp_instr, teleport_instr, play_sound_instr, jump_instr, jump_if_equal_instr, jump_if_not_equal_instr, lights_instr, play_music_instr, win_game_instr, restore_health_instr, text_box_instr, load_level_instr } from \"./tile\"\r\nimport { GameObject } from \"./gameobject\"\r\nimport { Enemy } from \"./enemy\"\r\nimport { DATA, ALL_BOBS, CONSTANTS, PLAYER } from \"./data\";\r\n\r\nexport class Level {\r\n\r\n    width: number;              //level's grid width (not in pixels)\r\n\theight: number;             //level's grid height (not in pixels)\r\n\ttileMap: number[][];        //the tileID map\r\n\ttileObjects: Tile[][];      //the Tile Objects\r\n\tplayer: Player;             //pointer to the player\r\n\tobjectArray: GameObject[];  //the array which holds the objects\r\n    enemyArray: Enemy[];        //the array which holds the enemies\r\n\tobjectset: BOB;             //the bob that holds the object pictures\r\n\tobjectSize: number;         //the number of objects currently alive in the game\r\n    enemySize: number;\r\n    songID: number;             // which background music for this level\r\n\r\n    constructor(\r\n        levelData: string,      // level data\r\n        tileset: BOB,           // tile set\r\n        o: BOB,                 // object set\r\n        no: number,\r\n        gareth: Player)             // level number?\r\n    {                       \r\n\r\n        this.songID = -1;\r\n        //link player to this object, and vice versa\r\n        this.player = gareth;\r\n        gareth.currentLevel = this;\r\n\r\n        this.objectset = o;\r\n\r\n        this.tileMap = [];\r\n        this.tileObjects = [];\r\n        this.objectArray = [];\r\n        this.objectSize = 0;\r\n        this.enemyArray = [];\r\n        this.enemySize = 0;\r\n\r\n        // Read in tile map and scripts\r\n\r\n        // Split the level file by line\r\n        let lines = levelData.split(/\\r?\\n/);\r\n        var wh = lines[0].split(/\\s/)\r\n        this.width = Number(wh[0])\r\n        this.height = Number(wh[1])\r\n\r\n        //2-pass loop, first loop just fill out the space with null otherwise x/y are mixed up\r\n        for (var i = 0; i < this.height; i++) {\r\n            var tiles = []\r\n            var tileObjects = []\r\n            for (var j=0; j<this.width; j++) {\r\n                \r\n                tiles.push(null);\r\n                tileObjects.push(null);\r\n            }\r\n            this.tileMap.push(tiles)\r\n            this.tileObjects.push(tileObjects)\r\n        }\r\n\r\n        // Next *height* lines are tile data\r\n        for (var i = 0; i < this.height; i++) {\r\n            let cellData = lines[i+1].split(/\\s/);\r\n            var tiles = []\r\n            var tileObjects = []\r\n            for (var j=0; j<this.width; j++) {\r\n                let cell = cellData[j]\r\n                // First three characters of cell is the tile ID\r\n                let tileID = Number(cell.substring(0,3))\r\n                this.tileMap[j][i] = tileID;\r\n                this.tileObjects[j][i] = new Tile(j*CONSTANTS.TileWidth, i*CONSTANTS.TileHeight, tileID, tileset, this);\r\n                // char 3 is for objects\r\n                let objectID = cell.charCodeAt(3) - 'a'.charCodeAt(0)\r\n                if (objectID >=0 && objectID < no) {\r\n                    this.createObject(j*CONSTANTS.TileWidth, i*CONSTANTS.TileHeight, objectID)\r\n                }\r\n                // char 4 indicates if there's an enemy\r\n                let enemyID = cell.charCodeAt(4) - 'a'.charCodeAt(0)\r\n                if ( (enemyID>=0 && enemyID <2) || enemyID==3) {\r\n                    this.createEnemy(j*CONSTANTS.TileWidth, i*CONSTANTS.TileHeight, enemyID)\r\n                }\r\n            }\r\n        }\r\n        // Read in Scripts and stuff\r\n        var ins:instr = null;\r\n        var tx = -1, ty = -1;\r\n        var immediate = false;\r\n        var scriptTile: Tile;\r\n\r\n        // create a temporary fake tile to execute immediate instructions\r\n        let tempTile = new Tile(-1, -1, this.tileMap[0][0], tileset, this);\r\n\r\n        for (var i = this.height + 1; i < lines.length; i++) {\r\n            let line = lines[i].trim();\r\n            if (line == '' || line.startsWith('//')) {\r\n                continue;\r\n            }\r\n            let tokens = line.split(/\\s+/)\r\n            switch (tokens[0]) {\r\n                case \"Immediate\": \r\n                    immediate = true;\r\n                    tx = 0;\r\n                    ty = 0;\r\n                    scriptTile = tempTile;\r\n                    continue;\r\n                case \"Script\":\r\n                    tx = Number(tokens[1]);\r\n                    ty = Number(tokens[2]);\r\n                    scriptTile = this.tileObjects[tx][ty];\r\n                    continue;\r\n                case \"SetState\":\r\n                    var ss_inst = new set_state_instr();\r\n                    ss_inst.id = CONSTANTS.ScriptInstrType.SetState;\r\n                    ss_inst.x = Number(tokens[1]);\r\n                    ss_inst.y = Number(tokens[2]);\r\n                    ss_inst.newState = Number(tokens[3]);\r\n                    ins = ss_inst;\r\n\r\n                    break;\r\n                case \"SetStateTemp\":\r\n                    var sst_inst = new set_state_temp_instr();\r\n                    sst_inst.id = CONSTANTS.ScriptInstrType.SetStateTemp;\r\n                    sst_inst.x = Number(tokens[1]);\r\n                    sst_inst.y = Number(tokens[2]);\r\n                    sst_inst.newState1 = Number(tokens[3]);\r\n                    sst_inst.newState2 = Number(tokens[4]);\r\n                    ins = sst_inst;\r\n\r\n                    break;\r\n                case \"ToggleState\":\r\n                    var ts_inst = new toggle_state_instr();\r\n                    ts_inst.id = CONSTANTS.ScriptInstrType.ToggleState;\r\n                    ts_inst.x = Number(tokens[1]);\r\n                    ts_inst.y = Number(tokens[2]);\r\n                    ts_inst.newState1 = Number(tokens[3]);\r\n                    ts_inst.newState2 = Number(tokens[4]);\r\n                    ts_inst.time = Number(tokens[5]);\r\n                    ts_inst.delay = Number(tokens[6]);\r\n                    ins = ts_inst;\r\n                    break;\r\n                case \"Teleport\":\r\n                    var tp_inst = new teleport_instr();\r\n                    tp_inst.id = CONSTANTS.ScriptInstrType.Teleport;\r\n                    tp_inst.tile_x = Number(tokens[1]);\r\n                    tp_inst.tile_y = Number(tokens[2]);\r\n                    ins = tp_inst;\r\n                    break;\r\n                case \"PlaySound\":\r\n                    var ps_inst = new play_sound_instr();\r\n                    ps_inst.id = CONSTANTS.ScriptInstrType.PlaySound;\r\n                    ps_inst.sound_id = Number(tokens[1])\r\n                    ins = ps_inst;\r\n                    break;\r\n                case \"Jump\":\r\n                    var j_inst = new jump_instr();\r\n                    j_inst.id = CONSTANTS.ScriptInstrType.Jump;\r\n                    j_inst.howFar = Number(tokens[1]);\r\n                    ins = j_inst;\r\n                    break;\r\n                case \"JumpIfEqual\":\r\n                    var je_inst = new jump_if_equal_instr();\r\n                    je_inst.id = CONSTANTS.ScriptInstrType.JumpIfEqual;\r\n                    je_inst.x = Number(tokens[1]);\r\n                    je_inst.y = Number(tokens[2]);\r\n                    je_inst.state = Number(tokens[3]);\r\n                    je_inst.howFar = Number(tokens[4]);\r\n                    ins = je_inst;\r\n                    break;\r\n                case \"JumpIfNotEqual\":\r\n                    var jne_inst = new jump_if_not_equal_instr();\r\n                    jne_inst.id = CONSTANTS.ScriptInstrType.JumpIfNotEqual;\r\n                    jne_inst.x = Number(tokens[1]);\r\n                    jne_inst.y = Number(tokens[2]);\r\n                    jne_inst.state = Number(tokens[3]);\r\n                    jne_inst.howFar = Number(tokens[4]);\r\n                    ins = jne_inst;\r\n                    break;\r\n                case \"Lights\":\r\n                    var l_inst = new lights_instr();\r\n                    l_inst.id = CONSTANTS.ScriptInstrType.Lights;\r\n                    l_inst.on_or_off = Boolean(Number(tokens[1]));\r\n                    ins = l_inst;\r\n                    break;\r\n                case \"PlayMusic\":\r\n                    var pm_inst = new play_music_instr();\r\n                    pm_inst.id = CONSTANTS.ScriptInstrType.PlayMusic;\r\n                    pm_inst.music_id = Number(tokens[1]);\r\n                    ins = pm_inst;\r\n                    break;\r\n                case \"LoadLevel\":\r\n                    var ll_inst = new load_level_instr();\r\n                    ll_inst.id = CONSTANTS.ScriptInstrType.LoadLevel;\r\n                    ll_inst.filename = tokens[1];\r\n                    ins = ll_inst;\r\n                    break;\r\n                case \"TextBox\":\r\n                    var tb_inst = new text_box_instr();\r\n                    tb_inst.id = CONSTANTS.ScriptInstrType.TextBox;\r\n                    tb_inst.text = line.substr(tokens[0].length + 1);\r\n                    ins = tb_inst;\r\n                    break;\r\n                case \"WinGame\":\r\n                    var win_inst = new win_game_instr();\r\n                    win_inst.id = CONSTANTS.ScriptInstrType.WinGame;\r\n                    ins = win_inst;\r\n                    break;\r\n                case \"RestoreHealth\":\r\n                    var rh_inst = new restore_health_instr();\r\n                    rh_inst.id = CONSTANTS.ScriptInstrType.RestoreHealth;\r\n                    ins = rh_inst;\r\n                    break;\r\n                case \"End\":\r\n                    scriptTile.scriptLoaded = true;\r\n                    scriptTile.numInstructions = scriptTile.script.length;\r\n                    if (immediate){\r\n                        scriptTile.processScript(scriptTile);\r\n                        immediate = false;\r\n                    }\r\n                    // Reset vars as sanity check\r\n                    tx = -1;\r\n                    ty = -1;\r\n                    scriptTile = null;\r\n                    ins = null;\r\n                    continue;\r\n            }\r\n            scriptTile.script.push(ins);\r\n        }\r\n    }\r\n\r\n    getTile(x:number, y:number) : number\r\n    {\r\n        let tempX =  Math.floor(x/40);\r\n        let tempY = Math.floor(y/40);\r\n        return this.tileMap[tempX][tempY];\r\n    }\r\n\r\n    getTileObject(x:number, y:number) : Tile\r\n    {\r\n        let tempX =  Math.floor(x/40);\r\n        let tempY = Math.floor(y/40);\r\n        return this.tileObjects[tempX][tempY];\r\n    }\r\n\r\n    \r\n    createObject(x:number,y:number, oid:number)\r\n    {\r\n        let gameObject = new GameObject(x, y, oid, this.objectset, this);\r\n        this.objectArray.push(gameObject)\r\n        this.objectSize = this.objectArray.length\r\n    }\r\n\r\n    createEnemy(x:number, y:number, enemyId:number)\r\n    {\r\n        var enemy:Enemy;\r\n        if (enemyId == 0)\r\n            enemy = new Enemy(x, y, enemyId, ALL_BOBS.GreyZombie, this);\r\n        if (enemyId == 1)\r\n            enemy = new Enemy(x, y, enemyId, ALL_BOBS.RedZombie, this);\r\n        if (enemyId == 3)\r\n            enemy = new Enemy(x, y, enemyId, ALL_BOBS.Sluggo, this);\r\n        this.enemyArray.push(enemy)\r\n        this.enemySize = this.enemyArray.length\r\n    }\r\n\r\n    updateObjectList()\r\n    {\r\n        for (var i = 0; i < this.objectSize; i++)\r\n        {\r\n            if (!this.objectArray[i].alive)\r\n            {\r\n                for (var j = i ; j < this.objectSize-1; j++)\r\n                {\r\n                    this.objectArray[j]=this.objectArray[j+1];\r\n                }\r\n                this.objectSize--;\r\n            }\r\n        }\r\n    }\r\n\r\n    updateEnemyList()\r\n    {\r\n        for (var i = 0; i < this.enemySize; i++)\r\n        {\r\n            if (!this.enemyArray[i].alive)\r\n            {\r\n                for (var j = i; j < this.enemySize-1; j++)\r\n                {\r\n                    this.enemyArray[j] = this.enemyArray[j+1];\r\n                }\r\n                this.enemySize--;\r\n            }\r\n        }\r\n    }\r\n\r\n    updateObjects()\r\n    {\r\n        for (var i = 0; i < this.objectSize; i++)\r\n            this.objectArray[i].update();\r\n    }\r\n\r\n    updateEnemies()\r\n    {\r\n        for (var i = 0; i < this.enemySize; i++)\r\n            this.enemyArray[i].update();\r\n    }\r\n\r\n    moveObjects()\r\n    {\r\n        for (var i = 0; i < this.objectSize; i++)\r\n            this.objectArray[i].move();\r\n    }\t\r\n\r\n    moveEnemies()\r\n    {\r\n        for (var i = 0; i < this.enemySize; i++)\r\n            this.enemyArray[i].move();\r\n    }\r\n\r\n    drawObjects()\r\n    {\r\n        for (var i = 0; i < this.objectSize; i++)\r\n            this.objectArray[i].draw();\r\n    }\r\n\r\n    drawEnemies()\r\n    {\r\n        for (var i = 0; i < this.enemySize; i++)\r\n            this.enemyArray[i].draw();\r\n    }\r\n    \r\n}"]}