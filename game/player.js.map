{"version":3,"sources":["player.ts"],"names":[],"mappings":"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","file":"player.js","sourceRoot":"..","sourcesContent":["import { Thing } from \"./thing\";\r\nimport { BOB, BOBAPI } from \"./bob\";\r\nimport { Level } from \"./level\";\r\nimport { CONSTANTS, INPUTCONTROLLER, GAME } from \"./data\";\r\n\r\nexport class Player extends Thing {\r\n    hasRedKey: boolean;\r\n    hasGreenKey: boolean;\r\n    hasBlueKey: boolean;\r\n\r\n    constructor(xt: number, yt: number, bobt: BOB, l: Level) {\r\n        super(xt, yt, bobt, l);\r\n        this.type_id = CONSTANTS.GameType.PLAYER;\r\n        this.height = 20;\r\n        this.width = 26;\r\n        this.speed = 4;\r\n        this.animationSpeed = 2;\r\n        this.hasRedKey = false;\r\n        this.hasGreenKey = false;\r\n        this.hasBlueKey = false;\r\n    }\r\n\r\n    draw() {\r\n        //Player is the only Thing which doesn't call defaultDraw() because\r\n        //he is always at 320,240. I made his Y 220 to counter for his bounding\r\n        //box being half his height. Everything else should set up thir draw()\r\n        //methods the same way except instead of calling Draw_BOB16, they should\r\n        //call defaultDraw(), so that they get drawn in world-relation to the player\r\n        this.processAnimation();\r\n        BOBAPI.Draw_BOB16(this.bob);\r\n    }\r\n\r\n    update() {\r\n\r\n        if (this.state == CONSTANTS.ThingState.FALLING)\r\n            return;\r\n        //reset vectors\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n        this.velocity = 0;\r\n\r\n\r\n\r\n        //process user input and set up angles.\r\n        //For enemies, this is done using doAI()\r\n        if (INPUTCONTROLLER.Key_Down) {\r\n            this.angle = 180;\r\n            this.velocity = this.speed;\r\n        }\r\n        if (INPUTCONTROLLER.Key_Up) {\r\n            this.angle = 0;\r\n            this.velocity = this.speed;\r\n        }\r\n        if (INPUTCONTROLLER.Key_Left) {\r\n            if (INPUTCONTROLLER.Key_Up)\r\n                this.angle = 315;\r\n            else if (INPUTCONTROLLER.Key_Down)\r\n                this.angle = 225;\r\n            else\r\n                this.angle = 270;\r\n            this.velocity = this.speed;\r\n        }\r\n        if (INPUTCONTROLLER.Key_Right) {\r\n            if (INPUTCONTROLLER.Key_Up)\r\n                this.angle = 45;\r\n            else if (INPUTCONTROLLER.Key_Down)\r\n                this.angle = 135;\r\n            else\r\n                this.angle = 90;\r\n            this.velocity = this.speed;\r\n        }\r\n        //CHEATS\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"1\") {\r\n            this.hasRedKey = true;\r\n            this.hasGreenKey = true;\r\n            this.hasBlueKey = true;\r\n\r\n        }\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"2\") {\r\n            GAME.load_level(\"levels\\\\mikeslevel.txt\");\r\n            this.x = 13 * 40;\r\n            this.y = 26 * 40;\r\n        }\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"3\") {\r\n            GAME.load_level(\"levels\\\\juanlevel.txt\");\r\n            this.x = 12 * 40;\r\n            this.y = 11 * 40;\r\n        }\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"4\") {\r\n            GAME.load_level(\"levels\\\\neallevel.txt\");\r\n            this.x = 95 * 40;\r\n            this.y = 95 * 40;\r\n        }\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"5\") {\r\n            this.health = 10000000;\r\n        }\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"6\") {\r\n            this.speed = 15;\r\n        }\r\n        if (INPUTCONTROLLER.KEY_PRESS==\"7\") {\r\n            this.speed = 4;\r\n        }\r\n\r\n        //Set up vx and vy. This method does it automatically using\r\n        //velocity and angle.\r\n        this.getComponents();\r\n    }\r\n\r\n    move() {\r\n        if (this.state == CONSTANTS.ThingState.FALLING)\r\n            return;\r\n        //move the player's X\r\n        this.x = this.x + this.round(this.vx);\r\n        //set movingX to true. This tells handleCollision whether we are currently\r\n        //moving the player's X or Y. It needs to know this information in order to\r\n        //take apropriate action\r\n        this.movingX = true;\r\n\r\n        //Do collission detection with tiles\r\n        this.checkCorners(CONSTANTS.GameType.TILE);\r\n\r\n        //do collission detection with tiles\r\n        for (let i = 0; i < this.currentLevel.objectSize; i++) {\r\n            if (this.checkCollision(this.currentLevel.objectArray[i]) > 0) {\r\n                this.currentLevel.objectArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.objectArray[i]);\r\n            }\r\n        }\r\n\r\n        //do collission detection with enemies\r\n        for (let i = 0; i < this.currentLevel.enemySize; i++) {\r\n            if (this.checkCollision(this.currentLevel.enemyArray[i]) > 0) {\r\n                this.currentLevel.enemyArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.enemyArray[i]);\r\n            }\r\n        }\r\n\r\n        //set movingX to false, because we are done moving the player's X\r\n        this.movingX = false;\r\n\r\n        //Now do the same process for Y\r\n        this.y = this.y + this.round(this.vy);\r\n        this.movingY = true;\r\n        this.checkCorners(CONSTANTS.GameType.TILE);\r\n        for (let i = 0; i < this.currentLevel.objectSize; i++) {\r\n            if (this.checkCollision(this.currentLevel.objectArray[i]) > 0) {\r\n                this.currentLevel.objectArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.objectArray[i]);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.currentLevel.enemySize; i++) {\r\n            if (this.checkCollision(this.currentLevel.enemyArray[i]) > 0) {\r\n                this.currentLevel.enemyArray[i].handleCollision(this);\r\n                this.handleCollision(this.currentLevel.enemyArray[i]);\r\n            }\r\n        }\r\n        this.movingY = false;\r\n\r\n    }\r\n\r\n\r\n    //figure out what frame of animation to use, and set it to currentFrame.\r\n    processAnimation() {\r\n        if (this.state == CONSTANTS.ThingState.FALLING) {\r\n            if (this.animationCounter < 15)\r\n                this.currentFrame = 12;\r\n            if (this.animationCounter >= 15 && this.animationCounter < 30)\r\n                this.currentFrame = 13;\r\n            if (this.animationCounter >= 30 && this.animationCounter < 45)\r\n                this.currentFrame = 14;\r\n            if (this.animationCounter >= 45) {\r\n                this.alive = false;\r\n            }\r\n        }\r\n        //set the frame based on angle\r\n        if (this.state == CONSTANTS.ThingState.NORMAL) {\r\n            if (this.velocity == 0)\r\n                this.animationFlipper = 0;\r\n            if (this.angle >= 0 && this.angle < 90) {\r\n                this.currentFrame = 9 + this.animationFlipper;\r\n            }\r\n            if (this.angle >= 90 && this.angle < 180) {\r\n                this.currentFrame = 3 + this.animationFlipper;\r\n            }\r\n            if (this.angle >= 180 && this.angle < 270) {\r\n                this.currentFrame = 0 + this.animationFlipper;\r\n            }\r\n            if (this.angle >= 270 && this.angle < 360) {\r\n                this.currentFrame = 6 + this.animationFlipper;\r\n            }\r\n            /*\r\n            animationCounter is a generic counter. when it reaches animationSpeed, it\r\n            resets, and increments animationFlipper which is the offset to the current frame\r\n            based on the direction the character is facing\r\n            */\r\n            if (this.animationCounter == this.animationSpeed) {\r\n                this.animationFlipper++;\r\n                this.animationCounter = 0;\r\n                if (this.animationFlipper > 2)\r\n                    this.animationFlipper = 0;\r\n            }\r\n        }\r\n        this.animationCounter++;\r\n        this.bob.curr_frame = this.currentFrame;\r\n        this.bob.x = 320;\r\n        this.bob.y = 220;\r\n    }\r\n\r\n    checkCorners(thing: number) {\r\n        if (this.x <= 0 || this.y <= 0 || this.x + this.width - 1 >= this.currentLevel.width * 40\r\n            || this.y + this.height - 1 >= this.currentLevel.height * 40)\r\n            return;\r\n        if (thing == CONSTANTS.GameType.TILE) {\r\n            //if checkCollision returned true, run both handleCollisions\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x, this.y)) > 0) {\r\n                this.currentLevel.getTileObject(this.x, this.y).handleCollision(this);\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x, this.y));\r\n            }\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y)) > 0) {\r\n                this.currentLevel.getTileObject(this.x + this.width - 1, this.y).handleCollision(this);\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y));\r\n            }\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y + this.height - 1)) > 0) {\r\n                this.currentLevel.getTileObject(this.x + this.width - 1, this.y + this.height - 1).handleCollision(this);\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x + this.width - 1, this.y + this.height - 1));\r\n            }\r\n            if (this.checkCollision(this.currentLevel.getTileObject(this.x, this.y + this.height - 1)) > 0) {\r\n                this.currentLevel.getTileObject(this.x, this.y + this.height - 1).handleCollision(this);\r\n                this.handleCollision(this.currentLevel.getTileObject(this.x, this.y + this.height - 1));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //prevent player hurt sound playing every frame\r\n    hurtDelay:Date = new Date();\r\n\r\n    hurt(h: number) {\r\n\r\n        let currentTime = new Date();\r\n        let timeDiff = currentTime.getTime()-this.hurtDelay.getTime();\r\n        if (timeDiff>100){\r\n            BOBAPI.DSound_Play(1);\r\n            this.hurtDelay = new Date();\r\n        }\r\n        this.health -= h;\r\n    }\r\n\r\n\r\n    bounce(thing:Thing) {\r\n        let bounceAmount = 19;\r\n        if (this.state == CONSTANTS.ThingState.FALLING)\r\n            return;\r\n\r\n        let tempvx = bounceAmount;\r\n        let tempvy = bounceAmount;\r\n        if (this.x < thing.x)\r\n            tempvx = -bounceAmount;\r\n        if (this.y < thing.y)\r\n            tempvy = -bounceAmount;\r\n\r\n        this.x = this.x + tempvx;\r\n        this.movingX = true;\r\n        this.checkCorners(CONSTANTS.GameType.TILE);\r\n        this.movingX = false;\r\n        this.y = this.y + tempvy;\r\n        this.movingY = true;\r\n        this.checkCorners(CONSTANTS.GameType.TILE);\r\n        this.movingY = false;\r\n    }\r\n}"]}