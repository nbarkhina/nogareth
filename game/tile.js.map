{"version":3,"sources":["tile.ts"],"names":[],"mappings":"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","file":"tile.js","sourceRoot":"..","sourcesContent":["import { BOB, BOBAPI } from \"./bob\";\r\nimport { Level } from \"./level\";\r\nimport { Thing } from \"./thing\";\r\nimport { CONSTANTS, GAME } from \"./data\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class Tile extends Thing {\r\n    tileID:number;\r\n    tileType:number;\r\n\r\n    script: instr[];\r\n    numInstructions:number;\r\n\t\r\n\t// // allow for a tile to change its state after a certain time\r\n\tstateChangeTimer:number;\r\n\ttoggleTime:number;\t// if > 0 then tile will change state every toggleTime frames\r\n\tnextState:number;\r\n\r\n\tscriptLoaded:boolean;\r\n\tscriptNeedsReset:boolean;\t//script will not fire unless player steps off and on tile\r\n\t\r\n\tstateChanged:boolean;\t\t//in case there's some special case that needs to be handled\r\n\r\n    constructor(x: number, y:number, t:number, bob:BOB, l:Level){\r\n        super(x, y, bob, l);\r\n        this.tileID = t;\r\n        this.type_id = CONSTANTS.GameType.TILE;\r\n        this.height = CONSTANTS.TileHeight;\r\n        this.width = CONSTANTS.TileWidth;\r\n        if (this.tileID<104)\r\n            this.tileType = CONSTANTS.TileType.Wall;\r\n        if (this.tileID>=104 && this.tileID<132)\r\n        this.tileType = CONSTANTS.TileType.Floor;\r\n        if ((this.tileID>=132 && this.tileID<136) || this.tileID==138)\r\n        this.tileType = CONSTANTS.TileType.Hole;\r\n        if (this.tileID==137){\r\n            this.tileType = CONSTANTS.TileType.Spike;\r\n            this.state = CONSTANTS.TileState.Up;\r\n        }\r\n        if (this.tileID==136){\r\n            this.tileType = CONSTANTS.TileType.Spike;\r\n        }\tthis.state = CONSTANTS.TileState.Down;\r\n\r\n        this.scriptLoaded = false;\r\n        this.scriptNeedsReset = false;\r\n        this.script = [];\r\n    }\r\n\r\n    draw()\r\n    {\r\n        this.processAnimation();\r\n        this.defaultDraw();\r\n    }\r\n\r\n    processAnimation()\r\n    {\r\n        this.currentFrame = this.tileID;\r\n        this.bob.curr_frame = this.currentFrame;\r\n        this.bob.x = this.x;\r\n        this.bob.y = this.y;\r\n    }\r\n\r\n    //handleCollision will process the script language, and then\r\n    //call defaultHandleCollision if needed.\r\n    handleCollision(thing:Thing)\r\n    {\t\r\n        if (thing.type_id == CONSTANTS.GameType.PLAYER){\r\n            if (this.scriptLoaded == true && this.scriptNeedsReset==false) {\r\n                this.processScript(thing);\r\n            }\r\n        }\r\n\r\n        // If you're on a script don't process\r\n        if (!this.scriptNeedsReset) {\r\n            this.defaultHandleCollision(thing);\r\n        }\r\n    }\r\n\r\n    defaultHandleCollision(thing:Thing)\r\n    {\r\n        //if the thing it collided with was a PLAYER\r\n        if (thing.type_id==CONSTANTS.GameType.PLAYER || thing.type_id==CONSTANTS.GameType.ENEMY)\r\n        {\r\n            //if this tile is a WALL\r\n            if(this.tileType==CONSTANTS.TileType.Wall)\r\n            {\r\n                //if the player is currently moving horizontally,\r\n                //move him to the edge of this tile.\r\n                if (thing.movingX)\r\n                {\r\n                    this.moveToEdgeX(thing, this);\r\n                }\r\n                else\r\n                {\r\n                    this.moveToEdgeY(thing, this);\r\n                }\r\n                \r\n            }\r\n            else if (this.tileType==CONSTANTS.TileType.Hole)\r\n            {\r\n                //thing.state=FALLING;\r\n                \r\n                if (this.currentLevel.getTileObject(thing.x,thing.y).tileType == CONSTANTS.TileType.Hole\r\n                && this.currentLevel.getTileObject(thing.x+thing.width-1,thing.y).tileType == CONSTANTS.TileType.Hole\r\n                && this.currentLevel.getTileObject(thing.x+thing.width-1,thing.y+thing.height-1).tileType == CONSTANTS.TileType.Hole\r\n                && this.currentLevel.getTileObject(thing.x,thing.y+thing.height-1).tileType == CONSTANTS.TileType.Hole\r\n                )\r\n                {\r\n                    thing.state=CONSTANTS.ThingState.FALLING;\r\n                    thing.animationCounter = 0;\r\n                    if (thing.type_id==CONSTANTS.GameType.PLAYER)\r\n                        BOBAPI.DSound_Play(4);\r\n\r\n                    if (thing.type_id==CONSTANTS.GameType.ENEMY)\r\n                    {\r\n                        var tempEnemy = thing as Enemy;\r\n                        // TODO: Should this include red zombies? In the original game it didn't but looks like a bug\r\n                        if( tempEnemy.enemyID==CONSTANTS.EnemyType.GreyZombie)\r\n                        {\r\n                            if (this.getDistance(thing)<350)\r\n                                BOBAPI.DSound_Play(9);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n\r\n            else if (this.tileType==CONSTANTS.TileType.Spike)\r\n            {\r\n                if(this.state==CONSTANTS.TileState.Up)\r\n                {\r\n                    thing.hurt(1);\r\n                    // if (thing.type_id==CONSTANTS.GameType.PLAYER)\r\n                    //     BOBAPI.DSound_Play(1);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    updateState()\r\n    {\r\n        // hard code special tiles (Thanks Neal!)\r\n        // what the? its not my fault you BABAR\r\n\r\n        // spike\r\n        if (this.tileType == CONSTANTS.TileType.Spike){\r\n            if (this.stateChanged){\r\n                if (this.state == CONSTANTS.TileState.On){\r\n                    this.toggleTime = 150;\r\n                    this.stateChangeTimer = this.toggleTime;\r\n                    this.state = CONSTANTS.TileState.Up;\r\n                    this.nextState = CONSTANTS.TileState.Down;\r\n                    \r\n                }\r\n                else if (this.state == CONSTANTS.TileState.Up){\r\n                    // set the tileid and that it kills things\r\n                    this.tileID = 137;\r\n                }\r\n                else if (this.state == CONSTANTS.TileState.Down){\r\n                    // set the tileid and that it doesn't kill things\r\n                    this.tileID = 136;\r\n                }\r\n\r\n                this.stateChanged = false;\r\n            }\r\n        }\r\n        else if (this.tileID >= 96 && this.tileID < 100)\r\n        {\r\n            if (this.stateChanged && this.state == CONSTANTS.TileState.Off)\r\n            {\r\n                BOBAPI.DSound_Play(7);\r\n                this.tileID += 4;\r\n                this.stateChanged = false;\r\n                this.tileType = CONSTANTS.TileType.Wall;\r\n            }\r\n            \r\n        }\r\n        else if (this.tileID >= 100 && this.tileID <104)\r\n        {\r\n            if (this.stateChanged && this.state == CONSTANTS.TileState.On)\r\n            {\r\n                BOBAPI.DSound_Play(7);\r\n                this.tileID -= 4;\r\n                this.stateChanged = false;\r\n                this.tileType = CONSTANTS.TileType.Wall;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    update()\r\n    {\r\n        // handle automatic state change\r\n        if (this.stateChangeTimer >= 0){\r\n            this.stateChangeTimer--;\r\n            if(this.stateChangeTimer == -1){\r\n                if (this.toggleTime > 0){\r\n                    this.stateChangeTimer = this.toggleTime;\r\n                    // swap state and next state\r\n                    var temp = this.nextState;\r\n                    this.nextState = this.state;\r\n                    this.state = temp;\r\n                    this.stateChanged = true;\r\n                }\r\n                else{\t// if no toggle \r\n                    this.state = this.nextState;\r\n                    this.stateChanged = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // reset script if necessary\r\n        if (this.scriptNeedsReset==true){\t\t\r\n            if (this.checkCollision(this.currentLevel.player)==0)\r\n            {\t\t\t\r\n                this.scriptNeedsReset = false;\r\n            }\r\n        }\r\n        \r\n        this.updateState();\r\n    }\r\n\r\n    processScript(thing:Thing)\r\n    {\r\n        var i:number, newX=-1, newY=-1;\r\n        var levelFile:string = null;\r\n\r\n        // make sure the script doesn't keep firing forever\r\n        this.scriptNeedsReset = true;\r\n        \r\n        // if (this.numInstructions > 0) {\r\n        //     console.log(this.script);\r\n        // }\r\n        for (var i=0; i<this.numInstructions; i++){\r\n            var instr = this.script[i];\r\n            \r\n            switch (instr.id){\r\n            case CONSTANTS.ScriptInstrType.SetState:\r\n                {\r\n                    let ins = instr as set_state_instr;\r\n                    // find the tile at ins.x, ins.y and set its state\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].state = ins.newState;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].nextState = ins.newState;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].stateChangeTimer = -1;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].toggleTime = -1;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].stateChanged = true;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].updateState();\r\n\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.SetStateTemp:\r\n                {\r\n                    let ins = instr as set_state_temp_instr;\r\n                    // find the tile at ins.x, ins.y and set its state\r\n                    // and set its timer and next state vars\r\n\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].state = ins.newState1;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].nextState = ins.newState2;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].stateChangeTimer = ins.time;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].toggleTime = -1;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].stateChanged = true;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].updateState();\r\n\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.ToggleState:\r\n                {\r\n                    let ins = instr as toggle_state_instr;\r\n                    // find the tile at ins.x, ins.y and set its state\r\n                    // and set its timer and next state and toggle vars\r\n\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].state = ins.newState1;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].nextState = ins.newState2;\r\n                    if (ins.delay > 0)\r\n                        this.currentLevel.tileObjects[ins.x][ins.y].stateChangeTimer = ins.delay;\r\n                    else\r\n                        this.currentLevel.tileObjects[ins.x][ins.y].stateChangeTimer = ins.time;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].toggleTime = ins.time;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].stateChanged = true;\r\n                    this.currentLevel.tileObjects[ins.x][ins.y].updateState();\r\n\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.LoadLevel:\r\n                {\r\n                    let ins = instr as load_level_instr;\r\n                    // load level file ins.filename\r\n                    GAME.load_level(ins.filename);\r\n\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.PlaySound:\r\n                {\r\n                    let ins = instr as play_sound_instr;\r\n                    // play sound at index ins.sound_id\r\n                    BOBAPI.DSound_Play(ins.sound_id);\r\n                    break;\r\n                }\r\n\r\n            case CONSTANTS.ScriptInstrType.PlayMusic:\r\n                {\r\n                    let ins = instr as play_music_instr;\r\n                    \r\n                    // play music at index ins.music_id \r\n                    BOBAPI.DMusic_Play(ins.music_id);\r\n                    this.currentLevel.songID = ins.music_id;\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.Teleport:\r\n                {\r\n                    let ins = instr as teleport_instr;\r\n                    // teleport player to tile_x, tile_y\r\n                    //newX = ins.tile_x*40;\r\n                    //newY = ins.tile_y*40;\r\n                    \r\n                    this.currentLevel.player.x = ins.tile_x*40;\r\n                    this.currentLevel.player.y = ins.tile_y*40;\r\n\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.TextBox:\r\n                {\r\n                    let ins = instr as text_box_instr;\r\n                    // text box \r\n\r\n                    GAME.show_text_box(ins.text);\r\n                    break;\r\n                }\r\n            case CONSTANTS.ScriptInstrType.Lights:\r\n                {\r\n                    let ins = instr as lights_instr;\r\n                    // text box \r\n                    GAME.set_lights(ins.on_or_off);\r\n                    break;\r\n                }\r\n\r\n            case CONSTANTS.ScriptInstrType.WinGame:\r\n                {\r\n                    let ins = instr as win_game_instr;\r\n                    // run end game\r\n                    GAME.game_win_game();\r\n                    break;\t\t\t\t\r\n                }\r\n            case CONSTANTS.ScriptInstrType.RestoreHealth:\r\n                {\r\n                    let ins = instr as restore_health_instr;\r\n                    // restore health\r\n                    this.currentLevel.player.health = 100;\r\n                    \r\n                    break;\r\n                    \r\n                }\r\n            case CONSTANTS.ScriptInstrType.Jump:\r\n                {\r\n                    let ins = instr as jump_instr;\r\n                    // move instruction pointer\r\n                    i += ins.howFar;\r\n                    if (i < 0) i = 0; \r\n                    break;\t\t\t\t\r\n                }\r\n            case CONSTANTS.ScriptInstrType.JumpIfEqual:\r\n                {\r\n                    let ins = instr as jump_if_equal_instr;\r\n                    // move instruction pointer if condition is met\r\n                    if (this.currentLevel.tileObjects[ins.x][ins.y].state == ins.state){\r\n                        i += ins.howFar;\r\n                        if (i < 0) i = 0; \r\n                    }\r\n                    break;\t\t\t\t\r\n                }\r\n            case CONSTANTS.ScriptInstrType.JumpIfNotEqual:\r\n                {\r\n                    let ins = instr as jump_if_not_equal_instr;\r\n                    // move instruction pointer if condition is met\r\n                    if (this.currentLevel.tileObjects[ins.x][ins.y].state != ins.state){\r\n                        i += ins.howFar;\r\n                        if (i < 0) i = 0; \r\n                    }\r\n                    break;\t\t\t\t\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getDistance(thing:Thing) : number\r\n    {\r\n        return Math.sqrt( Math.pow((this.currentLevel.player.x-thing.x),2) +\r\n                          Math.pow((this.currentLevel.player.y-thing.y),2));\r\n    }\r\n\r\n}\r\n\r\n// script instruction definitions\r\nexport class instr {\r\n    id: number;\r\n}\r\n\r\nexport class set_state_instr extends instr\r\n{\r\n\tid: number;\r\n\tx: number;\r\n\ty: number;\r\n\tnewState: number;\r\n};\r\n\r\nexport class set_state_temp_instr extends instr\r\n{\r\n\r\n\tid: number;\r\n\tx: number;\r\n\ty: number;\r\n\tnewState1: number;\r\n\tnewState2: number;\r\n\ttime: number;\r\n};\r\n\r\nexport class load_level_instr extends instr\r\n{\r\n\tid: number;\r\n\tfilename: string;\r\n};\r\n\r\nexport class play_sound_instr extends instr\r\n{\r\n\tid: number;\r\n\tsound_id: number;\r\n};\r\n\r\nexport class play_music_instr extends instr\r\n{\r\n\tid: number;\r\n\tmusic_id: number;\r\n};\r\n\r\nexport class teleport_instr extends instr\r\n{\r\n\tid: number;\r\n\ttile_x: number;\r\n\ttile_y: number;\r\n};\r\n\r\nexport class text_box_instr extends instr\r\n{\r\n\tid: number;\r\n\ttext: string;\r\n};\r\n\r\nexport class toggle_state_instr extends instr\r\n{\r\n\tid: number;\r\n\tx: number;\r\n\ty: number;\r\n\tnewState1: number;\r\n\tnewState2: number;\r\n\ttime: number;\r\n\tdelay: number;\r\n};\r\n\r\nexport class win_game_instr extends instr\r\n{\r\n\tid: number;\r\n};\r\n\r\nexport class restore_health_instr extends instr\r\n{\r\n\tid: number;\r\n};\r\n\r\nexport class lights_instr extends instr\r\n{\r\n\tid: number;\r\n\ton_or_off: boolean;\r\n};\r\n\r\nexport class jump_instr extends instr\r\n{\r\n\tid: number;\r\n\thowFar: number;\r\n};\r\n\r\nexport class jump_if_equal_instr extends instr\r\n{\r\n\tid: number;\r\n\tx: number;\r\n\ty: number;\r\n\tstate: number;\r\n\thowFar: number;\r\n};\r\n\r\nexport class jump_if_not_equal_instr extends instr\r\n{\r\n\tid: number;\r\n\tx: number;\r\n\ty: number;\r\n\tstate: number;\r\n\thowFar: number;\r\n};"]}