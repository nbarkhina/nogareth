{"version":3,"sources":["thing.ts"],"names":[],"mappings":"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","file":"thing.js","sourceRoot":"..","sourcesContent":["import { BOB, BOBAPI } from \"./bob\";\r\nimport { Level } from \"./level\";\r\nimport { CONSTANTS } from \"./data\";\r\n\r\nexport class Thing {\r\n\r\n\ttype_id: number;\t// Identifies whether it is an enemy, obj, or player\r\n\tx: number; // position of this thing in area coordinates\r\n\ty: number;\r\n\tbob: BOB; // pointer to a bob that contains image data\r\n\tcurrentLevel: Level; //pointer to the main module's level object\r\n\thealth = 100; //your health as a percentage\r\n\talive = true; // determines whether this thing is processed, drawn\r\n\tangle = 180; // direction of motion - should match with xv, yv\r\n\t\t\t\t // so that xv=speed*cos(angle), yv=speed*sin(angle)\r\n\tspeed = 0; // how fast this thing CAN move\r\n\tvx = 0; // current speed of this thing in x and y\r\n\tvy = 0;\r\n\talpha = 100; // visibility level - 0 - invisible, 100 - opaque\r\n\tcurrentRoom = 0; // the room the THING is in\r\n\tanimationCounter = 0; //used for animation\r\n\tanimationFlipper = 0; //used for animation\r\n\tanimationSpeed = 0;   //used for animation\r\n\tstartTime = 0; //number of frames before THING starts\r\n\tvelocity = 0; //how fast thing thing IS moving\r\n\tcurrentFrame = 0; //the frame with which to draw_BOB\r\n\r\n\tmovingX = false;\r\n\tmovingY = false;\r\n\theight = 40;\r\n\twidth = 40;\r\n\tstate: number = CONSTANTS.ThingState.NORMAL; // valid states depend on what exactly the thing is\r\n\t\t\t\t\t\t\t\t\t\t // but all things have states\r\n\tAI_mode:number;\r\n\r\n\t/*\r\n\tConstructor. Takes initial x and y position in area coordinates.\r\n\tProtected because you should never create an\r\n\tinstance of this class -- you should\r\n\tmake one of a child class instead.\r\n\t*/\r\n\tconstructor(xt: number, yt: number, bobt: BOB, l: Level) {\r\n\t\tthis.x = xt;\r\n\t\tthis.y = yt;\r\n\t\tthis.bob = bobt;\r\n\t\tthis.currentLevel = l;\r\n\t}\r\n\r\n\tdraw() {\r\n\r\n\t}\r\n\r\n\t//sets up vx and vy based on speed and direction\r\n\tgetComponents() {\r\n\t\tthis.vx = (this.velocity * Math.sin((this.angle * (3.14159) / 180)));\r\n\t\tthis.vy = -(this.velocity * Math.cos((this.angle * (3.14159) / 180)));\r\n\t}\r\n\r\n\t/*\t\r\n\t\treturns number of corners at which collision occured\r\n\t*/\r\n\tcheckCollision(thing: Thing): number {\r\n\t\tif (this.state == CONSTANTS.ThingState.FALLING || thing.state == CONSTANTS.ThingState.FALLING)\r\n\t\t\treturn 0;\r\n\r\n\t\tlet count = 0;\r\n\t\tlet xtemp, ytemp;\r\n\r\n\r\n\t\txtemp = this.x + this.width - 1;\r\n\t\tytemp = this.y;\r\n\t\tif (thing.x <= xtemp && xtemp <= (thing.x + thing.width - 1) && thing.y <= ytemp && ytemp <= (thing.y + thing.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\txtemp = this.x;\r\n\t\tytemp = this.y;\r\n\t\tif (thing.x <= xtemp && xtemp <= (thing.x + thing.width - 1) && thing.y <= ytemp && ytemp <= (thing.y + thing.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\txtemp = this.x + this.width - 1;\r\n\t\tytemp = this.y + this.height - 1;\r\n\t\tif (thing.x <= xtemp && xtemp <= (thing.x + thing.width - 1) && thing.y <= ytemp && ytemp <= (thing.y + thing.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\txtemp = this.x;\r\n\t\tytemp = this.y + this.height - 1;\r\n\t\tif (thing.x <= xtemp && xtemp <= (thing.x + thing.width - 1) && thing.y <= ytemp && ytemp <= (thing.y + thing.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\tif (count > 0)\r\n\t\t\treturn count;\r\n\r\n\t\txtemp = thing.x + thing.width - 1;\r\n\t\tytemp = thing.y;\r\n\t\tif (this.x <= xtemp && xtemp <= (this.x + this.width - 1) && this.y <= ytemp && ytemp <= (this.y + this.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\txtemp = thing.x;\r\n\t\tytemp = thing.y;\r\n\t\tif (this.x <= xtemp && xtemp <= (this.x + this.width - 1) && this.y <= ytemp && ytemp <= (this.y + this.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\txtemp = thing.x + thing.width - 1;\r\n\t\tytemp = thing.y + thing.height - 1;\r\n\t\tif (this.x <= xtemp && xtemp <= (this.x + this.width - 1) && this.y <= ytemp && ytemp <= (this.y + this.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\txtemp = thing.x;\r\n\t\tytemp = thing.y + thing.height - 1;\r\n\t\tif (this.x <= xtemp && xtemp <= (this.x + this.width - 1) && this.y <= ytemp && ytemp <= (this.y + this.height - 1))\r\n\t\t\tcount++;\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tdefaultDraw() {\r\n\t\tthis.bob.x = this.bob.x + (320 - this.currentLevel.player.x);\r\n\t\tthis.bob.y = this.bob.y + (240 - this.currentLevel.player.y);\r\n\t\t//console.log(String(this.bob.x) + \" \" + String(this.bob.y))\r\n\t\tBOBAPI.Draw_BOB16(this.bob);\r\n\t}\r\n\r\n\t/*\r\n\tthis will determine what frame of animation to set\r\n\t*/\r\n\tprocessAnimation() {\r\n\r\n\t}\r\n\r\n\t/* Should be called when a collision occurs between \r\n\t\tthis and something else.\r\n\t*/\r\n\thandleCollision(thing: Thing) {\r\n\r\n\t}\r\n\r\n\t//moves thing1 to the edge of thing2 horizontally\r\n\tmoveToEdgeX(thing1: Thing, thing2: Thing) {\r\n\t\tif (thing1.x < thing2.x) {\r\n\t\t\tthing1.x = thing2.x - thing1.width;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthing1.x = thing2.x + thing2.width;\r\n\t\t}\r\n\t}\r\n\r\n\t//moves thing1 to the edge of thing2 vertically\r\n\tmoveToEdgeY(thing1: Thing, thing2: Thing) {\r\n\t\tif (thing1.y < thing2.y) {\r\n\t\t\tthing1.y = thing2.y - thing1.height;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthing1.y = thing2.y + thing2.height;\r\n\t\t}\r\n\t}\r\n\r\n\t//TODO - check for rounding errors\r\n\t//rounds the number to the nearest int\r\n\tround(number: number) {\r\n\t\treturn Math.round(number);\r\n\r\n\t\t//OLD CODE \r\n\t\t// if (number>0 && number - ((int)number)>.5)\r\n\t\t// {\r\n\t\t// \treturn (float)((int)number+1);\r\n\t\t// }\r\n\t\t// if (number>0 && number - (float)((int)number)<=.5)\r\n\t\t// {\r\n\t\t// \treturn (float)((int)number);\r\n\t\t// }\r\n\t\t// if (number<0 && number - (float)((int)number)<=.5)\r\n\t\t// {\r\n\t\t// \treturn (float)((int)number);\r\n\t\t// }\r\n\t\t// if (number<0 && number - (float)((int)number)>.5)\r\n\t\t// {\r\n\t\t// \treturn (float)((int)number+1);\r\n\t\t// }\r\n\t\t// return number;\r\n\t}\r\n\r\n\thurt(h: number) {\r\n\t\tthis.health -= h;\r\n\t\tif (this.health <= 0)\r\n\t\t\tthis.alive = false;\r\n\t}\r\n\r\n\tgetAngle(x2: number, y2: number): number {\r\n\r\n\t\tlet x1 = this.x;\r\n\t\tlet y1 = this.y;\r\n\t\t/*\r\n\t\tint opposite;\r\n\t\tint hypotenuse;\r\n\t\topposite = y1-y2;\r\n\t\thypotenuse = x1 - x2;\r\n\t\tint angle = (int)((double)180/(3.14159))*asin((double)opposite/(double)hypotenuse);\r\n\t\tangle+=90;\r\n\t\t//if (angle<0)\r\n\t\t//\tangle+=180;\r\n\t\t//if (x2<x1)\r\n\t\t//\tangle+=180;\r\n\t\tif (opposite>0 && hypotenuse>0)\r\n\t\t\tangle+=180;\r\n\t\tif (angle>=360)\r\n\t\t\tangle-=360;\r\n\t\t*/\r\n\t\tif (x1 < x2 && y1 > y2)\r\n\t\t\tthis.angle = 45;\r\n\t\tif (x1 < x2 && y1 < y2)\r\n\t\t\tthis.angle = 135;\r\n\t\tif (x1 > x2 && y1 < y2)\r\n\t\t\tthis.angle = 225;\r\n\t\tif (x1 > x2 && y1 > y2)\r\n\t\t\tthis.angle = 315;\r\n\t\tif (Math.abs(x1 - x2) <= 5 && y1 < y2)\r\n\t\t\tthis.angle = 180;\r\n\t\tif (Math.abs(x1 - x2) <= 5 && y1 > y2)\r\n\t\t\tthis.angle = 0;\r\n\t\tif (Math.abs(y1 - y2) <= 5 && x1 < x2)\r\n\t\t\tthis.angle = 90;\r\n\t\tif (Math.abs(y1 - y2) <= 5 && x1 > x2)\r\n\t\t\tthis.angle = 270;\r\n\r\n\t\tthis.alpha = this.angle;\r\n\t\treturn this.angle;\r\n\t}\r\n\r\n\t//ADDITIONAL FUNCTION HEADERS FOUND IN THING.H - \r\n\r\n\t/* This method should be called every frame to allow\r\n\t\tthis thing to update itself. For enemies, AI occurs\r\n\t\there. For the player, input is processed in this \r\n\t\tmethod. Objects probably have nothing to do, but\r\n\t\tjust in case, they should be updated anyway.\r\n\t*/\r\n\tupdate() {\r\n\r\n\t}\r\n\r\n\t/* Starts the process of moving this object. This method\r\n\t\tmoves the thing based on its vx and vy. Also calls\r\n\t\tthe collision detector and calls handleCollision on\r\n\t\tthis or any other things as necessary.\r\n\t\tcall getRoom();\r\n\r\n\t*/\r\n\tdefaultMove() {\r\n\r\n\t}\r\n\r\n\t/*\r\n\t\tSaves this object to a file that\r\n\t\tis already set to the correct position\r\n\t\tThis absolutely needs to be overriden\r\n\t*/\r\n\tsave(file) {\r\n\r\n\t}\r\n\r\n\t/*\r\n\t\tLoads this object from an open file\r\n\t\tthat is already set to the correct position\r\n\t\tThis absolutely needs to be overriden\r\n\t*/\r\n\tload(file) {\r\n\r\n\t}\r\n\r\n\t//drops the object down a hole\r\n\tdrop() {\r\n\r\n\t}\r\n\r\n\t//sets currentRoom variable to the current room\r\n\tgetRoom() {\r\n\r\n\t}\r\n}\r\n\r\n"]}