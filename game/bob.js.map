{"version":3,"sources":["bob.ts"],"names":[],"mappings":"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","file":"bob.js","sourceRoot":"..","sourcesContent":["//will be a replacement for the old BOB class\r\n//as you come across properties during porting\r\n\r\ndeclare var Tone;\r\n\r\nimport { CANVAS, CONSTANTS, MUSIC_FILES, SOUND_FILES } from \"./data\";\r\n\r\n//just add them on to the class as needed\r\nexport class BOB{\r\n    x:number = 0;\r\n    y:number = 0;\r\n    width:number;\r\n    height:number;\r\n    curr_frame:number = 0;\r\n    numFrames:number;\r\n    img:HTMLImageElement;\r\n\r\n    // frame number -> FrameData\r\n    frames = {}\r\n\r\n    constructor(width:number, height:number){\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getCurrentFrameData() : FrameData {\r\n        return this.getFrameData(this.curr_frame)\r\n    }\r\n    getFrameData(frameNumber:number):FrameData{\r\n        return this.frames[frameNumber]\r\n    }\r\n}\r\n\r\nclass FrameData {\r\n    image:HTMLImageElement;\r\n    top:number;\r\n    left:number;\r\n    width:number;\r\n    height:number;\r\n\r\n    constructor(image:HTMLImageElement, left:number, top:number, width:number, height:number){\r\n        this.image = image;\r\n        this.top = top;\r\n        this.left = left;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\n//use this to placeholder the BOB API calls\r\nexport class BOBAPI{\r\n    static musicPlayer = document.createElement('audio');\r\n    static soundBuffers:{id:number,buffer:AudioBuffer }[] = [];\r\n    static audioContext:AudioContext;\r\n\r\n    static Draw_BOB16(bob:BOB){\r\n        let frameData = bob.getCurrentFrameData()\r\n        if (bob.x > CONSTANTS.ScreenWidth ||\r\n            bob.x + bob.width < 0 ||\r\n            bob.y > CONSTANTS.ScreenHeight ||\r\n            bob.y + bob.height < 0) {\r\n                //console.log(`${frameData.left} ${frameData.top} `)\r\n                return;\r\n            }\r\n        CANVAS.drawImage(\r\n            frameData.image,\r\n            frameData.left,\r\n            frameData.top,\r\n            frameData.width,\r\n            frameData.height,\r\n            bob.x,\r\n            bob.y,\r\n            bob.width,   // TODO: Multiply these by global scale factor\r\n            bob.height);\r\n    }\r\n\r\n    // Loads a frame from the sprite sheet. Width and height must be set before using this.\r\n    // if mode = BITMAP_EXTRACT_MODE_ABS then set cell_mode = false when calling this\r\n    static Load_Frame_BOB16(bob:BOB, image:HTMLImageElement, frameNumber:number, cx:number, cy:number, cell_mode=true){\r\n        var x:number, y:number;\r\n        if (cell_mode) {\r\n            x = cx*(bob.width+1) + 1;\r\n            y = cy*(bob.height+1) + 1;\r\n        } else {\r\n            x = cx;\r\n            y = cy;\r\n        }\r\n        bob.frames[frameNumber] = new FrameData(image, x, y, bob.width, bob.height)\r\n    }\r\n\r\n    static Create_BOB(x:number, y:number, width:number, height:number, numFrames:number):BOB {\r\n        var bob = new BOB(width, height)\r\n        bob.x = x\r\n        bob.y = y\r\n        bob.numFrames = numFrames;\r\n        return bob;\r\n    }\r\n\r\n\r\n    // The color can be any CSS color string like \"#FFFFFF\" or \"white\"\r\n    static Draw_Line16(x1:number, y1:number, x2:number, y2:number, color:string) {\r\n        let ctx = CANVAS;\r\n        ctx.strokeStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n    }\r\n\r\n    // The color can be any CSS color string like \"#FFFFFF\" or \"white\"\r\n    // This is very inefficient - should set color and then draw all the pixels\r\n    static Draw_Pixel16(x:number, y:number, color:string) {\r\n        let ctx = CANVAS;\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect( x, y, 1, 1 );\r\n    }\r\n\r\n    // This should probably be preloading the audio\r\n    static DSound_Play(soundID:number) {\r\n        // var audio = SOUND_FILES[soundID];\r\n        // audio.play();\r\n\r\n        // let buffer = new Tone.Buffer(SOUND_FILES[soundID].src, buffer => {\r\n        //     Tone.context.resume();\r\n        //     var soundplayer = new Tone.Player(buffer);\r\n        //     soundplayer.toMaster();\r\n        //     soundplayer.start();\r\n        // });\r\n\r\n        BOBAPI.PlaySoundFromBuffer(soundID);\r\n\r\n    }\r\n\r\n    static DrawText(text:string, x:number, y:number, maxWidth:number, lineHeight:number, color:string) {\r\n        var words = text.split(' ');\r\n        var line = '';\r\n\r\n        let context = CANVAS;\r\n        context.fillStyle = color;\r\n        context.font = \"16px Verdana,Arial\"\r\n\r\n        for(var n = 0; n < words.length; n++) {\r\n            var word = words[n];\r\n            if (word == \"<break>\") {\r\n                context.fillText(line, x, y);\r\n                y += lineHeight;\r\n                line = \"\";\r\n                continue;\r\n            } else if (word.startsWith(\"**\")) {\r\n                // centered line\r\n                for (n; n < words.length; n++) {\r\n                    word = words[n];\r\n                    line = line + word + \" \";\r\n                    if (word.endsWith(\"**\")) {\r\n                        break;\r\n                    }\r\n                }\r\n                var testLine = line + word + ' ';\r\n                var metrics = context.measureText(testLine);\r\n                var testWidth = metrics.width;\r\n                var offset = 0;\r\n                if (maxWidth - testWidth >= 0) {\r\n                    offset =  maxWidth - testWidth;\r\n                }\r\n                context.fillText(line, x+offset, y);\r\n                line=\"\";\r\n                continue;\r\n            }\r\n            var testLine = line + word + ' ';\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > maxWidth && n > 0) {\r\n                context.fillText(line, x, y);\r\n                line = words[n] + ' ';\r\n                y += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        context.fillText(line, x, y);\r\n      }\r\n    \r\n    \r\n    static DMusic_Play(musicID:number) {\r\n        //call this twice so that current music stops playing immediately\r\n        if (window['player'])\r\n        {\r\n            window['player'].stop();\r\n        }\r\n\r\n        let buffer = new Tone.Buffer(MUSIC_FILES[musicID], buffer => {\r\n            Tone.context.resume();\r\n            //call this again just in case before starting new track\r\n            if (window['player'])\r\n            {\r\n                window['player'].stop();\r\n            }\r\n            window['player'] = new Tone.Player(buffer);\r\n            window['player'].toMaster();\r\n            window['player'].loop = true;\r\n            window['player'].start();\r\n            // console.log('player started');\r\n        });\r\n        // console.log('DMusic_play: ' + musicID);\r\n\r\n        // BOBAPI.musicPlayer.src = MUSIC_FILES[musicID];\r\n        // BOBAPI.musicPlayer.loop = true;\r\n        // BOBAPI.musicPlayer.play();\r\n        \r\n\r\n\r\n    }\r\n\r\n    static DMusic_Stop(){\r\n        // BOBAPI.musicPlayer.pause();\r\n        if (window['player'])\r\n        {\r\n            window['player'].stop();\r\n        }\r\n    }\r\n\r\n    static RGB(r:number, g:number, b:number) : string {\r\n        let toHex = function(n:number) {\r\n            if (n >= 16) {\r\n                return n.toString(16)\r\n            } else {\r\n                return \"0\" + n.toString()\r\n            }\r\n        }\r\n        return \"#\" + toHex(r) + toHex(g) + toHex(b);\r\n    }\r\n\r\n    static LoadAllSounds() {\r\n\r\n        let audioCtx: AudioContext;\r\n        try {\r\n            audioCtx = new AudioContext();\r\n        } catch (error) {\r\n            try {\r\n                //try for mobile\r\n                audioCtx = new window['webkitAudioContext']();\r\n                console.log('found mobile audio');\r\n            } catch (error2) {\r\n                console.log('could not initialize audio');\r\n            }\r\n        }\r\n\r\n        BOBAPI.audioContext = audioCtx;\r\n        audioCtx.resume();\r\n\r\n        SOUND_FILES.forEach(sound => {\r\n            // Fetch the sound file from the server\r\n            fetch(sound)\r\n                // Return the data as an ArrayBuffer\r\n                .then(response => response.arrayBuffer())\r\n                // Decode the audio data\r\n                .then(buffer => audioCtx.decodeAudioData(buffer))\r\n                .then(decodedData => {\r\n                    let soundid = 0;\r\n                    for (let i = 0; i < SOUND_FILES.length; i++) {\r\n                        if (SOUND_FILES[i] == sound)\r\n                            soundid = i;\r\n                    }\r\n                    //store it in an audio buffer array for later when needed\r\n                    var soundBuffer = { id: soundid, buffer: decodedData };\r\n                    BOBAPI.soundBuffers.push(soundBuffer);\r\n                    if (BOBAPI.soundBuffers.length == SOUND_FILES.length) {\r\n                        console.log('Finished Loading Sounds');\r\n                        window[\"myApp\"].finishedLoading();\r\n                    }\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    private static PlaySoundFromBuffer(id:number){\r\n        try{\r\n            const audioCtx = BOBAPI.audioContext;\r\n            audioCtx.resume();\r\n            let soundBuffer = BOBAPI.soundBuffers[0];\r\n            for(let i=0;i<BOBAPI.soundBuffers.length;i++){\r\n                if (BOBAPI.soundBuffers[i].id==id)\r\n                    soundBuffer = BOBAPI.soundBuffers[i];\r\n            }\r\n            var source = audioCtx.createBufferSource();\r\n            source.buffer = soundBuffer.buffer;\r\n            source.connect(audioCtx.destination);\r\n            source.start();\r\n        }catch(error){\r\n            //in case the sound buffers haven't finished loading\r\n        }\r\n    }\r\n}\r\n\r\n"]}